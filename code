#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

//id в диапозоне от 0 до n не включительно

void update_tree(vector<long long>& Tree, int num_left_list, int id, int value)
{
	int num_list = num_left_list + id;
	Tree[num_list] = value;
	while (num_list != 1)
	{
		num_list /= 2;
		Tree[num_list] = Tree[num_list * 2] + Tree[num_list * 2 + 1];
	}
}

long long Sum_tree(vector<long long>& Tree, int id, int lt, int rt, int l, int r) // lt, rt диапозон хранения ячейки по id; l, r диапозон что найти
{
	if (l <= lt && r <= rt)
	{
		return Tree[id];
	}
	if (rt <= l || r <= lt)
	{
		return 0;
	}
	int mid = (rt + lt) / 2;
	long long l_block = Sum_tree(Tree, id * 2, lt, mid, l, r);
	long long r_block = Sum_tree(Tree, id * 2 + 1, mid, rt, l, r);
	return l_block + r_block;
}

int main()
{
	int n;
	cin >> n;
	vector<int> a(n);
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
	}
	vector<long long> Tree(4 * n);
	int count_list;
	int num_left_list = 1;
	while (num_left_list < n)
	{
		num_left_list *= 2;
	}
	count_list = num_left_list;
	for (int i = 0; i < n; i++)
	{
		update_tree(Tree, num_left_list, i, a[i]);
	}
	int type, l, r, id, val;
	int q;
	cin >> q;
	for (int i = 0; i < q; i++)
	{
		cin >> type;
		if (type == 2)
		{
			cin >> id >> val;
			id--; // id в диапозоне от 1 до n включительно
			update_tree(Tree, num_left_list, id, val);
		}
		else
		{
			cin >> l >> r;
			l--; 
			int res = Sum_tree(Tree, 1, 0, count_list, l, r);
			cout << res << '\n';
		}
	}
}
